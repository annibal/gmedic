@function sqrt ($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return 100% * $number / 255;
}

// from https://gist.github.com/jlong/f06f5843104ee10006fe
@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}

.box-container {
  position:relative;
  &:before {
    content:"";
    display: block;
    padding-top: 100%;
  }
  &.golden:before {
    padding-top: 61.8%;
  }
  &>.box-inner {
    position:  absolute;
    top: 0; left: 0; bottom: 0; right: 0;
  }
}

.middle-container, .center-container {
  position:relative;
  & > .middle, & > .center {
    position:absolute;
  }
  & > .middle {
    top:50%;
    transform:translateY(-50%);
  }
  & > .center {
    left:50%;
    transform:translateX(-50%);
  }
  & > .middle.center {
    left:50%;
    top:50%;
    transform:translate(-50%,-50%);
  }
}

.border {
  border:1px solid white;
}

.sidescroll {
  position:relative;
  overflow:hidden;
  height: 100%;
  &>.sidescroll-inner {
    height:120%;
    width:120%;
    padding:0 20% 20% 0;
    overflow-x:scroll;
    overflow-y:hidden;
    white-space: nowrap;
    &::-webkit-scrollbar  {
      display: none;
      height: 0;
      width: 0;
    }
  }

}
